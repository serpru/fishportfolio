@page "/projects"

@using MudBlazor.Services
@using fishportfolio.Pages.Components
@using fishportfolio.Data.ViewModel

@implements IAsyncDisposable

@inject IResizeService ResizeService
@inject ISnackbar Snackbar      // For debug only

<PageTitle>Projects</PageTitle>
<MudContainer MaxWidth="MaxWidth.False" Class="ma-0 pa-0 d-flex flex-column justify-space-between">


    <MudContainer MaxWidth="MaxWidth.Large" Class="my-3 d-flex flex-column">

        <MudContainer MaxWidth="MaxWidth.Medium">

            <MudPaper Class="px-6 py-4 mb-3" Elevation="2" MinWidth="50vw">
                <Fishcrumbs />
                <MudText Color="Color.Primary" Align="Align.Left" Typo="Typo.h1">Projects</MudText>
                <MudText Color="Color.Primary" Align="Align.Left" Typo="Typo.body1">
                    Below you can see my collection of personal projects that I made.
                </MudText>
            </MudPaper>

            <MudDivider />
        </MudContainer>
        

        <MudContainer MaxWidth="MaxWidth.False" Class="my-3 d-flex justify-content-end">
            <MudContainer MaxWidth="MaxWidth.ExtraSmall">
                <MudPaper>
                    <MudSelect Class="ma-0 pa-0" @bind-Value=isTimeline T="bool" Variant=Variant.Outlined Adornment=Adornment.End AdornmentColor=Color.Primary AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="true">Timeline</MudSelectItem>
                        <MudSelectItem Value="false">Grid</MudSelectItem>
                    </MudSelect>
                </MudPaper>

            </MudContainer>
        </MudContainer>


        @if (isTimeline)
        {
            <MudContainer MaxWidth="MaxWidth.Medium" Class="my-3">
                <MudTimeline TimelinePosition="@_timelinePos">
                    @foreach (var project in _projects)
                    {
                        <MudTimelineItem Size="Size.Medium" Color="Color.Tertiary">
                            <ItemDot>
                                @if (project.IsDone)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                                }
                            </ItemDot>
                            <ItemContent>
                                <MudCard Outlined Class="border-top-0">
                                    <MudCardMedia Image=@project.ImageLink Height="250" />
                                    <MudCardContent>
                                        <MudText Color="Color.Primary" Typo="Typo.h5">@project.Title</MudText>
                                        <MudText Color="Color.Primary" Typo="Typo.body2">@project.Description</MudText>
                                    </MudCardContent>
                                    <MudCardActions Class="justify-content-between">
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" Href=@project.Href>Learn More</MudButton>
                                        <div class="d-flex flex-wrap">
                                            @foreach (var chip in project.Chips)
                                            {
                                                <MudChip Variant="Variant.Outlined" Color=@project.Color>@chip</MudChip>
                                            }
                                        </div>
                                    </MudCardActions>
                                </MudCard>
                            </ItemContent>
                            <ItemOpposite>
                                <MudChip Color="Color.Secondary" Variant="Variant.Outlined" DisableRipple>
                                    @if (@project.IsDone)
                                    {
                                        <MudText>@project.Date.ToShortDateString()</MudText>
                                    }
                                    else
                                    {
                                        <MudText>In progress!</MudText>
                                    }

                                </MudChip>
                            </ItemOpposite>
                        </MudTimelineItem>
                    }
                </MudTimeline>
            </MudContainer>
        }
        else
        {
            <MudGrid Spacing="2" Justify="Justify.Center">
                @foreach (var project in _projects)
                {
                    <MudItem Class="mx-4 px-0" xs="12" sm="3">
                        <MudCard Outlined Class="border-top-0">
                            <MudCardMedia Image=@project.ImageLink Height="200" />
                            <MudCardContent>
                                <MudText Color="Color.Primary" Typo="Typo.h5">@project.Title</MudText>
                                <MudText Color="Color.Primary" Typo="Typo.body2">@project.Description</MudText>
                            </MudCardContent>
                            <MudCardActions Class="d-flex flex-column justify-content-between">
                                <div class="d-flex flex-wrap">
                                    @foreach (var chip in project.Chips)
                                    {
                                        <MudChip Variant="Variant.Outlined" Color=@project.Color>@chip</MudChip>
                                    }
                                </div>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Href=@project.Href>Learn More</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
            <MudDivider />
        }
    </MudContainer>

</MudContainer>

@code
{
    private List<ProjectViewModel> _projects = new List<ProjectViewModel>
    {
        new ProjectViewModel(new DateTime(2021,10,21),
        "LOGO DESIGN PROJECT", "Logo design for personal use","/images/logo_seal.svg","/projects/projectlogo/", Color.Primary, false, new List<String>{"Design","Vector graphics"}),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel()
    };

    private int _breakPointWidth = 640;
    private TimelinePosition _timelinePos = TimelinePosition.Alternate;

    private Guid _subscriptionId;

    private bool isTimeline = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _subscriptionId = await ResizeService.Subscribe((size) =>
            {
                EvaluateTimelinePosition(size);
                InvokeAsync(StateHasChanged);
            }, new ResizeOptions
                {
                    ReportRate = 100,
                    NotifyOnBreakpointOnly = false,
                });

            var size = await ResizeService.GetBrowserWindowSize();
            EvaluateTimelinePosition(size);
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void EvaluateTimelinePosition(BrowserWindowSize size) =>
    _timelinePos = (size.Width <= _breakPointWidth) ? TimelinePosition.Left : TimelinePosition.Alternate;

    public async ValueTask DisposeAsync() => await ResizeService.Unsubscribe(_subscriptionId);
}