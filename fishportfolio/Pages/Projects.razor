@page "/projects"

@using MudBlazor.Services
@using fishportfolio.Pages.Components
@using fishportfolio.Data.ViewModel

@implements IAsyncDisposable

@inject IResizeService ResizeService
@inject ISnackbar Snackbar      // For debug only

<PageTitle>Projects</PageTitle>
<MudContainer MaxWidth="MaxWidth.False" Class="ma-0 pa-0 d-flex flex-column justify-space-between">
    <MudPaper Class="px-6 py-4 mx-6 mb-3 align-self-center" Elevation="2" MinWidth="60vw" MaxWidth="800px">
        <Fishcrumbs />
        <MudText Color="Color.Secondary" Align="Align.Left" Typo="Typo.h1">Projects</MudText>
        <MudText Color="Color.Secondary" Align="Align.Left" Typo="Typo.body1">
            Below you can see my collection of personal projects that I made.
        </MudText>
    </MudPaper>

    <MudContainer MaxWidth="MaxWidth.Medium" Class="my-3 d-flex flex-column">
        

        <MudSelect @bind-Value=isTimeline T="bool" Label="View" Adornment=Adornment.Start AdornmentColor=Color.Secondary AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="true" />
            <MudSelectItem Value="false" />
        </MudSelect>

        <MudDivider />

        @if (isTimeline)
        {
            Snackbar.Add("true");
            <MudTimeline TimelinePosition="@_timelinePos">
                @foreach (var project in _projects)
                {
                    <MudTimelineItem Size="Size.Medium" Color="Color.Tertiary">
                        <ItemDot>
                            @if (project.IsDone)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                            }
                        </ItemDot>
                        <ItemContent>
                            <MudCard Outlined>
                                <MudCardMedia Image=@project.ImageLink Height="200" />
                                <MudCardContent>
                                    <MudText Color="Color.Secondary" Typo="Typo.h5">@project.Title</MudText>
                                    <MudText Color="Color.Secondary" Typo="Typo.body2">@project.Description</MudText>
                                </MudCardContent>
                                <MudCardActions Class="justify-content-between">
                                    <MudButton Variant="Variant.Text" Color="Color.Secondary" Href=@project.Href>Learn More</MudButton>
                                    <div class="d-flex">
                                        @foreach (var chip in project.Chips)
                                        {
                                            <MudChip Variant="Variant.Outlined" Color=@project.Color>@chip</MudChip>
                                        }
                                    </div>
                                </MudCardActions>
                            </MudCard>
                        </ItemContent>
                        <ItemOpposite>
                            <MudChip Color="Color.Primary" Variant="Variant.Outlined" DisableRipple>
                                <MudText>@project.Date.ToShortDateString()</MudText>
                            </MudChip>
                        </ItemOpposite>
                    </MudTimelineItem>
                }
            </MudTimeline>
        } else
        {
            Snackbar.Add("false");
            <MudText>False</MudText>
        }


    </MudContainer>

</MudContainer>

@code
{
    private List<ProjectViewModel> _projects = new List<ProjectViewModel>
    {
        new ProjectViewModel(new DateTime(2021,10,21),
        "Tytuł", "Opis","/images/banner.jpg","/pokemonoftheday", Color.Secondary, false, new List<String>{"C#","Python"}),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel(),
        new ProjectViewModel()
    };

    private int _breakPointWidth = 640;
    private TimelinePosition _timelinePos = TimelinePosition.Alternate;

    private Guid _subscriptionId;

    private bool isTimeline = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _subscriptionId = await ResizeService.Subscribe((size) =>
            {
                EvaluateTimelinePosition(size);
                InvokeAsync(StateHasChanged);
            }, new ResizeOptions
                {
                    ReportRate = 100,
                    NotifyOnBreakpointOnly = false,
                });

            var size = await ResizeService.GetBrowserWindowSize();
            EvaluateTimelinePosition(size);
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void EvaluateTimelinePosition(BrowserWindowSize size) =>
    _timelinePos = (size.Width <= _breakPointWidth) ? TimelinePosition.Left : TimelinePosition.Alternate;

    public async ValueTask DisposeAsync() => await ResizeService.Unsubscribe(_subscriptionId);

    private void OnClick(MouseEventArgs args)
    {
        Snackbar.Add($"OnClick Invoked: {args.ToString()}");

    }
}
